
(*** Subtyping supports

 - the term reduction rules, fixpoints, generic queries and updates
 - self-evaluators

Fixpoints use self-application so introduce

sub_recursion: Omega2 < Omega2 -> ...

Generic queries are given by triage which are typed by

sub_tree: Fork (Fork W X) Y < U -> {U}T

where T is covariant and W,X and Y are chosen to ensure soundness when
U becomes a leaf, stem or fork.

(Key Principal) In any rule for subtyping such triages by function
types, X must be a function type, and Y must be a binary function
type.

Self-evaluators are tricky.

The goal is to show

bf = triage { Node, Node, bff } : (U -> V) -> (U -> V).

Note that sub_tree will not do since bff may produce leaves, stems or
forks, and so is not of type X -> Y -> Fork X Y.


Rather, it has the conditional typing

F X Y < Z -> T implies bff: X -> Y -> Z -> T

but this condition is not allowed by Coq within a premise to a
subtyping rule.  This is captured by the typing

bff : X -> Y -> Asf (F X Y)

where Asf shows that F X Y must becomea function type before being
interesting.  The relevant subtyping rules are

T < Asf T

Asf (U->V) < U -> V

Now consider the typing of bf and its sub-expressions. The reduction

bffs x y z ---> eager (e (e x z)) (e y z)

where e represents bf, must type for any x and y, so give bf the type

bf : X -> Asf X

When X is U -> V then we have

bf : (U -> V) -> Asf (U -> V) < (U -> V) -> (U -> V)

as desired. Finally, the typing of bffs and bfff require subtyping
rules to handle Asf, namely

Fork (Stem (bff_aug U)) (Asf V) < Asf (Fork (Stem U) V)

Fork (Fork U (Asf V)) (bff_aug W) < Asf (Fork (Fork U V) W)

These two rules preserves the form of the type, as a fork of a stem or
a fork of a fork, and so may be iterated. This increases the book-keeping required to 
classify subtyping without introducing any fundamental challenges. 

quant n applies n quantifiers.

quantf n applies n Asf 

quanta bs applies a mix of quantifiers and Asf, as recorded by the list of booleans bs. 

   *)


Subtyping supports

 - the term reduction rules, fixpoints, generic queries and updates
 - self-evaluators

Fixpoints use self-application so introduce

sub_recursion: Omega2 < Omega2 -> ...

Generic queries are given by triage which can be typed by

sub_tree: Fork (Fork W X) Y < U -> {U}T

where T is covariant and W,X and Y are chosen to ensure soundness when
U becomes a leaf, stem or fork.

(Key Principal) In any rule for subtyping such triages by function
types, X must be a function type, and Y must be a binary function
type.

Self-evaluators are tricky.

The goal is to show

bf = triage {Node, Node, bff} : (U -> V) -> (U -> V).

Note that sub_tree will not do since bff may produce leaves, stems or
forks, and so is not of type X -> Y -> Fork X Y.

Rather, the goal is to show

F U V < Z -> T implies bff: U -> V -> Z -> T

but this condition is not allowed by Coq within a premise to a
subtyping rule. We need a type-form bff_fun{X,Y} with the following
three properties.

(1) type(bff) < \/ X,Y. X -> Y -> bff_fun{X,Y} and

(2) F X Y < Z -> T implies bff_fun{X,Y} < Z -> T

(3) Fork (Fork Leaf Leaf1) (\/ X,Y. X -> Y -> bff_fun{X,Y}) < eval_ty

where Leaf1 = \/ X. X -> Stem X .

Indeed, if these three requirements are packaged as an axiom
subtype_bf then we can type bf and show that reduction preserves
typing.

Let us consider bff_fun as a new type constructor, and see what
happens.

(2) suggests that bff_fun{X,Y} sits between fork types and function
types, so rename it as Fasf X Y and add

Fork X Y < Fasf X Y

and replace all subtyping rules of the form Fork U V < Z -> T with

Fasf U V < Z -> T

Now (3) becomes a subtyping rule

sub_bf: Fork (Fork Leaf Leaf1) (\/ X,Y. X -> Y -> Fasf X Y) < eval_ty


Next, for reduction to preserve typing, this inequality must survive
when the argument of bf, of type U -> V, is a leaf, stem or fork type.
This seems to work, so it remains to establish (1) i.e.

Fork (Fork (type(K), type(bffs)) type(bfff)) < X -> Y -> Fasf X Y

or better

Fork (Fork K_ty bffs_ty) bfff_ty < X -> Y -> Fasf X Y

for some Kty bffs_ty and bfff_ty that satisfy

(4) K : K_ty < Y -> Fasf Leaf Y

(5) bffs : bffs_ty < X -> Y -> Fasf (Stem X) Y

(6) bfff : bfff_ty < W -> X -> Y -> Fasf (Fork W X) Y

Now (4) holds by setting Kty = \/ X,Y. X -> Y -> X.


However, problems arise with bffs since bffs x y reduces to 

\z. e (exz) (eyz) = S1 (S1 (K e) (e x)) (e y).

Since e: eval_ty, it must be that x is of function type, etc. 

So, introduce Asf T such that 

(7) T < Asf T

(8) Asf (U-> V) < U -> V

(9) eval_ty = \/X. Asf X -> Asf X 

and start over.  Define Fasf X Y = Asf (Fork X Y). Now (2), (3) and (4) follow. For (5) we need 

S1 (S1 (K e) (e x)) (e y) : F(S(F(S(F L eval_ty)) Asf X)) Asf Y. 

so it is enough to assume 

(10) F(S(F(S(F L eval_ty)) Asf X)) Asf Y < Asf (F(S X) Y)

For (6) we have 

bfff w x y -> triage{w, e x, bfff_fork y}  which must be of type Asf (Fork (Fork W X) Y).

Now e x: Asf X is fine but what is the type of bfff_fork y when y:Y?
If Y is a binary function type then bfff_fork y has the same type.
So add Asf2 and

type (bfff_fork) < \/ Y. Asf2 Y -> Asf2 Y


so that (6) becomes

Fork (Fork W (Asf X)) (Asf2 Y) < Asf (Fork (Fork W X) Y).



bfff_fork y reduces to \z1, z2. (e (e y z1) z2) =
△ @
  (△ @
     (△ @ (△ @ (△ @ △ @ △)) @
        (△ @ (△ @ (△ @ △ @ △)) @
            (△ @ (△ @ (△ @ △ @ (△ @ △))) @
        (△ @ (△ @ (△ @ △ @ Ref "e")) @ (△ @ (△ @ (△ @ △ @ (Ref "e" @ y))) @ I)))))) @ KI)
	: bfff_fork Y
	< \/ Z1, Z2. Z1 -> Z2 -> bfff_fork {Y,Z1,Z2} 
.

If y : Z1 -> Z2 -> T then so is bfff_fork y.  




and define bfff_fork_ty so that  bfff_fork y : bfff_fork_ty Y . 
Then (6) becomes 

Asf (Fork (Fork W (Asf X) (Asf2 Y))) (bfff_fork_ty Y)) < must be of type Z1 -> Z2 -> T.




(* for README 
Lemma bffs_with_two:
  forall x y,  t_red (bffs @ x @ y) (S1 (S1 (K @ Ref "e") @ (Ref "e" @ x)) @ (Ref "e" @ y)). 
Proof. intros; cbv; trtac. Qed.

Lemma bfff_with_three:
  forall w x y,  t_red (bfff @ w @ x @ y) (triage w (Ref "e" @ x)
     (△ @
      (△ @
       (△ @ (△ @ (△ @ △ @ △)) @
        (△ @ (△ @ (△ @ △ @ △)) @
         (△ @ (△ @ (△ @ △ @ (△ @ △))) @
          (△ @ (△ @ (△ @ △ @ Ref "e")) @ (△ @ (△ @ (△ @ △ @ (Ref "e" @ y))) @ I)))))) @ KI)). 
Proof.  intros; cbv; trtac. Qed. 

Lemma bfff_fork_with_1:
  forall y,
    t_red (bfff_fork @ y)
          (△ @
             (△ @
                (△ @ (△ @ (△ @ △ @ △)) @
                   (△ @ (△ @ (△ @ △ @ △)) @
                      (△ @ (△ @ (△ @ △ @ (△ @ △))) @
                         (△ @ (△ @ (△ @ △ @ Ref "e")) @ (△ @ (△ @ (△ @ △ @ (Ref "e" @ y))) @ I)))))) @ KI). 
Proof. intros; cbv; trtac. Qed.

*) 






